{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38097\\\\Documents\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\Contacts\\\\ContactList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // import PropTypes from 'prop-types';\n\nimport Contact from './Contact';\nimport s from './Contact.module.css'; // import { connect } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactList = () => {\n  _s();\n\n  const getFilteredContacts = state => {\n    const getFilter = state => state.contacts.filter;\n\n    const normalizeFilter = getFilter(state).toLowerCase();\n\n    const getContacts = state => state.contacts.items;\n\n    const contacts = getContacts(state);\n    return contacts.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name.toLowerCase().includes(normalizeFilter);\n    });\n  };\n\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: s.ul,\n    children: contacts.map(_ref2 => {\n      let {\n        id,\n        name,\n        number\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Contact, {\n        id: id,\n        name: name,\n        number: number,\n        onDelete: onDeleteContact\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactList, \"k1PFgZY3xE9F3u4VjgAv2j4HxqE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ContactList;\nContactList.protoTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  }))\n}; // ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   onDelete: PropTypes.func.isRequired,\n// };\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(deleteContact(id)),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nexport default ContactList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["C:/Users/38097/Documents/goit-react-hw-06-phonebook/src/components/Contacts/ContactList.js"],"names":["React","Contact","s","deleteContact","useSelector","useDispatch","ContactList","getFilteredContacts","state","getFilter","contacts","filter","normalizeFilter","toLowerCase","getContacts","items","name","includes","dispatch","onDeleteContact","id","ul","map","number","protoTypes","PropTypes","arrayOf","shape","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,CAAP,MAAc,sBAAd,C,CACA;;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACnC,UAAMC,SAAS,GAAGD,KAAK,IAAIA,KAAK,CAACE,QAAN,CAAeC,MAA1C;;AACA,UAAMC,eAAe,GAAGH,SAAS,CAACD,KAAD,CAAT,CAAiBK,WAAjB,EAAxB;;AACA,UAAMC,WAAW,GAAGN,KAAK,IAAIA,KAAK,CAACE,QAAN,CAAeK,KAA5C;;AACA,UAAML,QAAQ,GAAGI,WAAW,CAACN,KAAD,CAA5B;AACA,WAAOE,QAAQ,CAACC,MAAT,CAAgB;AAAA,UAAC;AAAEK,QAAAA;AAAF,OAAD;AAAA,aACrBA,IAAI,CAACH,WAAL,GAAmBI,QAAnB,CAA4BL,eAA5B,CADqB;AAAA,KAAhB,CAAP;AAGD,GARD;;AASA,QAAMF,QAAQ,GAAGN,WAAW,CAACG,mBAAD,CAA5B;AACA,QAAMW,QAAQ,GAAGb,WAAW,EAA5B;;AACA,QAAMc,eAAe,GAAGC,EAAE,IAAIF,QAAQ,CAACf,aAAa,CAACiB,EAAD,CAAd,CAAtC;;AAEA,sBACE;AAAI,IAAA,SAAS,EAAElB,CAAC,CAACmB,EAAjB;AAAA,cACGX,QAAQ,CAACY,GAAT,CAAa;AAAA,UAAC;AAAEF,QAAAA,EAAF;AAAMJ,QAAAA,IAAN;AAAYO,QAAAA;AAAZ,OAAD;AAAA,0BACZ,QAAC,OAAD;AAEE,QAAA,EAAE,EAAEH,EAFN;AAGE,QAAA,IAAI,EAAEJ,IAHR;AAIE,QAAA,MAAM,EAAEO,MAJV;AAKE,QAAA,QAAQ,EAAEJ;AALZ,SACOC,EADP;AAAA;AAAA;AAAA;AAAA,cADY;AAAA,KAAb;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA3BD;;GAAMd,W;UAUaF,W,EACAC,W;;;KAXbC,W;AA4BNA,WAAW,CAACkB,UAAZ,GAAyB;AACvBd,EAAAA,QAAQ,EAAEe,SAAS,CAACC,OAAV,CACRD,SAAS,CAACE,KAAV,CAAgB;AACdP,IAAAA,EAAE,EAAEK,SAAS,CAACG,MAAV,CAAiBC;AADP,GAAhB,CADQ;AADa,CAAzB,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,eAAevB,WAAf","sourcesContent":["import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport Contact from './Contact';\r\nimport s from './Contact.module.css';\r\n// import { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts-actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst ContactList = () => {\r\n  const getFilteredContacts = state => {\r\n    const getFilter = state => state.contacts.filter;\r\n    const normalizeFilter = getFilter(state).toLowerCase();\r\n    const getContacts = state => state.contacts.items;\r\n    const contacts = getContacts(state);\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizeFilter)\r\n    );\r\n  };\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = id => dispatch(deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.ul}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <Contact\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onDelete={onDeleteContact}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nContactList.protoTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     })\r\n//   ).isRequired,\r\n//   onDelete: PropTypes.func.isRequired,\r\n// };\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: getVisibleContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\nexport default ContactList;\r\n"]},"metadata":{},"sourceType":"module"}