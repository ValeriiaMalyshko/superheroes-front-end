{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38097\\\\Documents\\\\goit-react-hw-07-phonebook\\\\src\\\\components\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid'; // import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nimport s from './Form.module.css'; // import { connect } from 'react-redux';\n\nimport { useCreateContactMutation, useFetchContactsQuery } from 'redux/contactsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const [createContact] = useCreateContactMutation;\n  const [contacts] = useFetchContactsQuery;\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.warn(`There is something wrong`);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    createContact({\n      name,\n      number\n    });\n    setName('');\n    setNumber('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: s.container,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: nameInputId,\n      className: s.label,\n      children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: s.input,\n        type: \"text\",\n        name: \"name\",\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true,\n        value: name,\n        onChange: handleChange,\n        id: nameInputId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: numberInputId,\n      className: s.label,\n      children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: s.input,\n        type: \"tel\",\n        name: \"number\",\n        pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n        title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n        required: true,\n        value: number,\n        onChange: handleChange,\n        id: numberInputId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: s.btn,\n      type: \"submit\",\n      children: \"Add contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"mgYk2feJE7Nd8w88JvjzPww6GtA=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/38097/Documents/goit-react-hw-07-phonebook/src/components/Form/Form.js"],"names":["React","useState","nanoid","s","useCreateContactMutation","useFetchContactsQuery","Form","name","setName","number","setNumber","nameInputId","numberInputId","createContact","contacts","handleChange","e","value","currentTarget","console","warn","handleSubmit","preventDefault","some","contact","toLowerCase","alert","container","label","input","btn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\n// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport s from './Form.module.css';\r\n// import { connect } from 'react-redux';\r\nimport {\r\n  useCreateContactMutation,\r\n  useFetchContactsQuery,\r\n} from 'redux/contactsSlice';\r\n\r\nconst Form = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const nameInputId = nanoid();\r\n  const numberInputId = nanoid();\r\n\r\n  const [createContact] = useCreateContactMutation;\r\n  const [contacts] = useFetchContactsQuery;\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        console.warn(`There is something wrong`);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (\r\n      contacts.some(\r\n        contact => contact.name.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n    createContact({ name, number });\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.container}>\r\n      <label htmlFor={nameInputId} className={s.label}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label htmlFor={numberInputId} className={s.label}>\r\n        Number\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n          id={numberInputId}\r\n        />\r\n      </label>\r\n      <button className={s.btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}